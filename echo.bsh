#! /bin/Bash

#******************************************************************************
#* File:            :echo.bsh
#* version          :20171103 v0
#* File Type        :Bash 
#* Purpose          :import Logical Model from Excel into PDM model     
#* Title:           :
#* Category         :Discipl deploy script
#* Identificatie    :\BI&D_EDW_MTHV\1130 Hulpmiddelen\3000 Scripts\3200 Ontwerp 

#'big thanks to pim Otte en Stef van Leeuwen Wigo4il  

# rationale
# Use this task in a build or release pipeline to run a Bash script on macOS, Linux, or Windows. 
# DevOps: REST API Execution Through Bash Shell Scripting


# ********** instructies **********
#1. start bash shell
#2. run het script . echo.bsh   => serving needs  CERT_HOST_IP
# ********** parameters **********

CERT_HOST_IP=waardepapieren.westeurope.cloudapp.azure.com  #FQDN
GIT_CODE_DIR=/Users/boscp08/Dropbox/github/Waardepapieren-AZRE-ACI
PRJ_DIR=/Users/boscp08/Projects/scratch/virtual-insanity


# A start from scratch  git clone 
## cd $PRJ_DIR
## rm -rf waardepapieren
## git clone https://github.com/discipl/waardepapieren.git
MAIN_DIR=/Users/boscp08/Projects/scratch/virtual-insanity/waardepapieren
CF_DIR=/Users/boscp08/Projects/scratch/virtual-insanity/waardepapieren/clerk-frontend
WP_DIR=/Users/boscp08/Projects/scratch/virtual-insanity/waardepapieren/waardepapieren-service

# B set docker-compose-travis.yml

cd $MAIN_DIR
touch docker-compose-travis.yml 
mv docker-compose-travis.yml  docker-compose-travis_`date "+%Y%m%d-%H%M%S"`.yml

echo "version: '3'
services:
  waardepapieren-service:
    volumes:
      #- ./waardepapieren-service/system-test/certs:/certs:rw
      #- ./waardepapieren-service/system-test/ephemeral-certs:/ephemeral-certs:rw
      - ./waardepapieren-service/configuration/:/app/configuration2:rw  #FAKE
    build: waardepapieren-service/.
    links:
      - mock-nlx
    ports:
      - 3232:3232
      - 3233:3233
    environment:
      - WAARDEPAPIEREN_CONFIG=/app/configuration/waardepapieren-config-compose-travis.json
      # Ignore self-signed ephemeral cert issues
      - NODE_TLS_REJECT_UNAUTHORIZED=0
  clerk-frontend:
    build:
      context: clerk-frontend/
      args:
        - CERTIFICATE_HOST=http://$CERT_HOST_IP:8880
    links:
      - waardepapieren-service
    ports:
      - 443:443
      - 8880:8880
    healthcheck:
      test: service nginx status
  #  volumes:
  #    - ./clerk-frontend/nginx/certs:/etc/nginx/certs:rw
  mock-nlx:
    build: mock-nlx/
    ports:
      - 80:80" > docker-compose-travis.yml


# C set Dockerfiles 
cd $CF_DIR
touch Dockerfile
mv Dockerfile  Dockerfile_`date "+%Y%m%d-%H%M%S"`
echo "" > Dockerfile

echo "FROM node:10
RUN mkdir /app
ADD package.json package-lock.json /app/
ENV REACT_APP_EPHEMERAL_ENDPOINT=$CERT_HOST_IP:443/api/eph
ENV REACT_APP_EPHEMERAL_WEBSOCKET_ENDPOINT=wss://$CERT_HOST_IP:443/api/eph-ws
WORKDIR /app
RUN npm install --unsafe-perm
ADD public /app/public
ADD src /app/src
ARG CERTIFICATE_HOST
ENV REACT_APP_CERTIFICATE_HOST=\${CERTIFICATE_HOST}
RUN npm run build

FROM nginx:1.15.8
ADD nginx/nginx.conf /etc/nginx/nginx.conf
COPY --from=0 /app/build /usr/share/nginx/html
#  volumes:
#    - ./clerk-frontend/nginx/certs:/etc/nginx/certs:rw
RUN mkdir /etc/nginx/certs
ADD nginx/certs/org.crt /etc/nginx/certs/org.crt
ADD nginx/certs/org.key /etc/nginx/certs/org.key" > Dockerfile


cd $WP_DIR
touch Dockerfile
mv Dockerfile  Dockerfile_`date "+%Y%m%d-%H%M%S"`
echo "#FROM node:10
#RUN mkdir /app
#ADD .babelrc package.json package-lock.json /app/
#ADD src/* app/src/
#ADD configuration/* app/configuration/
#ENV WAARDEPAPIEREN_CONFIG /app/configuration/waardepapieren-config.json
#WORKDIR /app
#RUN npm install --production
#CMD npm start
FROM node:10
RUN mkdir /app
ADD .babelrc package.json package-lock.json /app/
ADD src/* app/src/
ADD configuration/* app/configuration/
#- ./waardepapieren-service/system-test/certs:/certs:ro
RUN mkdir /certs
ADD system-test/certs/org.crt /certs/org.crt
ADD system-test/certs/org.key /certs/org.key
#- ./waardepapieren-service/system-test/ephemeral-certs:/ephemeral-certs:ro
RUN mkdir /ephemeral-certs
ADD system-test/ephemeral-certs/org.crt /ephemeral-certs/
ADD system-test/ephemeral-certs/org.key /ephemeral-certs/
#- ./waardepapieren-service/configuration/:/app/configuration:ro

WORKDIR /app
RUN mkdir /configuration
ADD configuration/waardepapieren-config-compose.json /app/configuration
ADD configuration/waardepapieren-config-compose-travis.json /app/configuration
ADD configuration/waardepapieren-config.json /app/configuration
ENV WAARDEPAPIEREN_CONFIG /app/configuration/waardepapieren-config.json

RUN npm install --production
CMD npm start" > Dockerfile

cd $MAIN_DIR

#  Clean up previous deployment (containersk and images)

# remove alle containers `docker stop $(docker ps -a -q)`
# remove alle containers and images `docker rm $(docker ps -a -q) && docker rmi $(docker images -q)`
# remove all stopped containers (just waist of storage} `docker container prune`

# D docker-compose  

cd $MAIN_DIR
docker-compose -f docker-compose-travis.yml up --build 

#  docker commit  



# docker login


# docker push


# az login

# Congratulations! You've configured a custom Linux AZURE container in App Service.



# az delete resource group


# az create resource group


# az create containter group


# blader naar protal.azure.com 
clear
cd $GIT_DIR



# container brings it≈õ own file system, on every type of system
## docker 
#|step|description|command|
#|--|------------|----------------|
#|1|	install docker download | `sudo  install -y docker docker-common docker-client`  |
#|2| enable docker daemon| 	` systemctl enable docker ` |
#|3| and start docker daemon	| 	` systemctl start docker ` |
#|4| verify that docker daemon is active by running your first container| ` docker run hello-world` |
#
#but now as a 'normal'  user
#`groupadd docker`
#` usermod -aG docker boscp08`
#`systemctl restart docker `
#`docker run hello-world` 
#*hello from docker This message shows that your installation appears to be working correctly. *
